import xml.etree.ElementTree as ET
import uuid as guid
from Component import*
from Composition import*
from DataTypesAndInterfacesParser import *
from CompositionParser import *
import os

autosar_org = "http://autosar.org/3.2.1"
autosar_schema_instance = "http://www.w3.org/2001/XMLSchema-instance"
autosar_schema_location = "http://autosar.org/3.2.1 autosar_3-2-1.xsd"

swc_path = "TOP-LEVEL-PACKAGES/AR-PACKAGE/SUB-PACKAGES/AR-PACKAGE/ELEMENTS/APPLICATION-SOFTWARE-COMPONENT-TYPE"
behavior_path = "TOP-LEVEL-PACKAGES/AR-PACKAGE/SUB-PACKAGES/AR-PACKAGE/ELEMENTS/INTERNAL-BEHAVIOR"

integer_types = {
    "SInt8": { "lower": "-128", "upper": "127" },
    "UInt8": { "lower": "0", "upper": "255" },
    "SInt16": { "lower": "-32768", "upper": "32767" },
    "UInt16": { "lower": "0", "upper": "65535" },
    "SInt32": { "lower": "-2147483648", "upper": "2147483647" },
    "UInt32": { "lower": "0", "upper": "4294967295" } }

data_type_typedef = {
    "Boolean": "boolean_T",
    "Float": "real_T",
    "SInt8": "int8_T",
    "UInt8": "uint8_T",
    "SInt16": "int16_T",
    "UInt16": "uint16_T",
    "SInt32": "int32_T",
    "UInt32": "uint32_T" }
 

class RunnableCFile:
    def __init__(self, file, Component):
        Name=Component.GetComponentName()
        include =  '#include \"' + Name + '_rte.h\"'
        print("/*", file=file)
        print("   Code generated by Autosar Studio for software Component:", file=file)
        print("   " + Name, file=file)
        print("", file=file)
        print("   This file should contain definitions for the runnables.", file=file)
        print("   Prototypes for the runnable functions and data access methods", file=file)
        print("", file=file)
        print("   Example:", file=file)
        print("   real_T Rte_IRead_swc_Runnable_Step_Port1_DataElement1();", file=file)
        print("", file=file)
        print("   extern void Runnable_Step(void);", file=file)
        print("", file=file)
        print("   Refer to" + Name+ "_rte.h to find the current supported", file=file)
        print("   function headers", file=file)
        print("*/", file=file)
        print("", file=file)
        print(include, file=file)
        print("", file=file)
        print("/* WRITE YOUR CODE DOWN HERE */", file=file)
        print("", file=file)

        file.close()

class swc_RteHFile:
    def __init__(self, file, Component,DataTypesAndInterfacesParser):
        file.truncate()
        Name=Component.GetComponentName()
        read_Data_Elements=Component.Get_Data_Read_Elements()
        readElementsMappedToRPorts=dict(zip(read_Data_Elements,Component.Get_R_Ports_Of_Data_Read_Elements()))
        write_Data_Elements=Component.Get_Data_Write_Elements()
        writeElementsMappedToPPorts=dict(zip(write_Data_Elements,Component.Get_P_Ports_Of_Data_Write_Elements()))
        
        # any data  extracted from DataTypesAndInterfacesParser  is related to the all components not for a specific one 
        all_Data_Elements =DataTypesAndInterfacesParser.Get_Data_Elements()   
        dataTypes = DataTypesAndInterfacesParser.Get_Data_Types_Of_All_Data_Elements()
        dataElementsMappedToTypes=dict(zip(all_Data_Elements,dataTypes))

        print("/*", file=file)
        print("   Code generated by Autosar Studio for software Component:", file=file)
        print("   " + Name, file=file)
        print("*/", file=file)
        print("", file=file)
        print("#ifndef RTE_HEADER_" + Name+ "_h_", file=file)
        print("#define RTE_HEADER_" + Name+ "_h_", file=file)
        print("", file=file)
        print("#include \"" + Name+ "_datatypes.h\"", file=file)
        print("", file=file)
        print("/*", file=file)
        print("   This file contains prototypes for the runnables and data access points", file=file)
        print("   used by the Software Component (" + Name + ")", file=file)
        print("*/", file=file)
        print("", file=file)

        for element  in write_Data_Elements :
            print("void " + "Rte_IWrite_" + Name + "_" + Name+"Runnable" + "_" +  writeElementsMappedToPPorts[element]+ "_" + element + "(" + dataElementsMappedToTypes[element] + " u);", file=file)
            print("", file=file)
        
        for element  in read_Data_Elements:
            print(dataElementsMappedToTypes[element]  + " " + "Rte_IRead_" + Name + "_" + Name +"Runnable"+ "_" + readElementsMappedToRPorts[element]  + "_" + element + "(void);", file=file)
            print("", file=file)
        
        print("", file=file)
        print("#endif", file=file)
        file.close()

class DataTypeHFile:
    def __init__(self, file, Component,DataTypesAndInterfacesParser):
        file.truncate()
        Name=Component.GetComponentName()
       
               # any data  extracted from DataTypesAndInterfacesParser  is related to the all components not for a specific one 
        
        dataTypes = DataTypesAndInterfacesParser.Get_Data_Types()
        #print(dataTypes)

        print("/*", file=file)
        print("   Code generated by Autosar Studio for software Component:", file=file)
        print("   " +  Name, file=file)
        print("*/", file=file)
        print("", file=file)
        print("#ifndef RTE_HEADER_Data_Type_h_", file=file)
        print("#define RTE_HEADER_Data_Type_h_", file=file)
        print("", file=file)
        print("#include \"rtetypes.h\"", file=file)
        print("", file=file)
        print("/*", file=file)
        print("   This file contains defintions for the DataTypes supported", file=file)
        print("   by the Software Component (" +  Name + ")", file=file)
        print("*/", file=file)
        print("", file=file)
        
        for data_type in dataTypes:
            print("typedef " + data_type_typedef[data_type] + " " + data_type + ";", file=file)
            
        print("", file=file)
        print("#endif", file=file)
        file.close()



class RTE_C_generator:
    def __init__(self, file,DataTypesAndInterfacesParser,Composition):
        file.truncate()
        compenentslist= Composition.Components_List
        composition=CompositionParser("Composition.arxml")
        connectors = composition.Get_Connectors_From_Composition()
        All_Ports_Elements={}
        Repeated_ports={}
        RunnableOfRepeatedPorts=[]
        print ('#include <stdio.h>',file=file)
        print ('#include <time.h>',file=file)
        print ('#include <unistd.h>',file=file)
        print ('#include <pthread.h>',file=file)

        for component in compenentslist:
            # print #inlude part 
            Name=component.GetComponentName()
            print('#include"'+ Name+'/'+Name+'_rte.h',file=file)   

            # get all ports and seperate ports that are accessed by more than ne dataelement(repeated)
            read_Data_Elements=component.Get_Data_Read_Elements()
            readElementsMappedToRPorts=dict(zip(read_Data_Elements,component.Get_R_Ports_Of_Data_Read_Elements()))
            write_Data_Elements=component.Get_Data_Write_Elements()
            writeElementsMappedToPPorts=dict(zip(write_Data_Elements,component.Get_P_Ports_Of_Data_Write_Elements())) 
            for element  in read_Data_Elements:
                if( All_Ports_Elements.get(readElementsMappedToRPorts[element])!=None):
                    Repeated_ports[readElementsMappedToRPorts[element]]= [element, All_Ports_Elements[readElementsMappedToRPorts[element]]]
                    del All_Ports_Elements[readElementsMappedToRPorts[element]]
                    RunnableOfRepeatedPorts.append(component.Get_Runnable_Name())
                else:
                    All_Ports_Elements[readElementsMappedToRPorts[element]]=element
            for element  in write_Data_Elements:
                if( All_Ports_Elements.get(writeElementsMappedToPPorts[element])!=None):
                    Repeated_ports[writeElementsMappedToPPorts[element]]= [element, All_Ports_Elements[writeElementsMappedToPPorts[element]]]
                    del All_Ports_Elements[writeElementsMappedToPPorts[element]] 
                    RunnableOfRepeatedPorts.append(component.Get_Runnable_Name())
                else:
                    All_Ports_Elements[writeElementsMappedToPPorts[element]]=element
        print('\n',file=file)           
        print(All_Ports_Elements)
        print(Repeated_ports)
        # print datatypes and ports section 
        all_Data_Elements =DataTypesAndInterfacesParser.Get_Data_Elements()   
        dataTypes = DataTypesAndInterfacesParser.Get_Data_Types_Of_All_Data_Elements()
        dataElementsMappedToTypes=dict(zip(all_Data_Elements,dataTypes))
        for component in compenentslist:
            Runnable=component.Get_Runnable_Name()
            read_Data_Elements=component.Get_Data_Read_Elements()
            readElementsMappedToRPorts=dict(zip(read_Data_Elements,component.Get_R_Ports_Of_Data_Read_Elements()))
            write_Data_Elements=component.Get_Data_Write_Elements()
            writeElementsMappedToPPorts=dict(zip(write_Data_Elements,component.Get_P_Ports_Of_Data_Write_Elements())) 
            for element  in read_Data_Elements:  
                flag=0
                for port in Repeated_ports:
                    if(port==readElementsMappedToRPorts[element]):
                        flag=1
                if(flag==0):   
                    print(dataElementsMappedToTypes[element]  + " RTE_" +Runnable +"_" +readElementsMappedToRPorts[element]+ " ;",file=file)
            for element  in write_Data_Elements:
                flag=0
                for port in Repeated_ports:
                    if(port==writeElementsMappedToPPorts[element]):
                        flag=1
                if(flag==0):       
                    print(dataElementsMappedToTypes[element]  + " RTE_"+Runnable +"_" + writeElementsMappedToPPorts[element]+" ;",file=file)
        print('\n',file=file)
        #print structure of repeated  ports 
        for port  in Repeated_ports :
            print("typedef struct \n { ",file=file)
            for element in Repeated_ports[port]:
                print (dataElementsMappedToTypes[element]+ " "+element+" ;",file=file)
            #print("} RTE_"+runnable+"_"+port +" ;",file=file)
            
        print('\n',file=file)

        #print functions implementation
        for component in compenentslist:
            read_Data_Elements=component.Get_Data_Read_Elements()
            Name=component.GetComponentName()
            Runnable=component.Get_Runnable_Name()
            readElementsMappedToRPorts=dict(zip(read_Data_Elements,component.Get_R_Ports_Of_Data_Read_Elements()))
            write_Data_Elements=component.Get_Data_Write_Elements()
            writeElementsMappedToPPorts=dict(zip(write_Data_Elements,component.Get_P_Ports_Of_Data_Write_Elements())) 
            # print read functions 
             
            for element  in read_Data_Elements:
                print(dataElementsMappedToTypes[element]  + " " + "Rte_IRead_" + Name + "_"+ Runnable+ "_" + readElementsMappedToRPorts[element]  + "_" + element + "(void)", file=file)
                for i in range(len(connectors)):
                    if(connectors[i][2]==Name ):
                        if( connectors[i][3]== readElementsMappedToRPorts[element]):
                            print ('{\n'+ 'return '+ connectors[i][0]+"_"+connectors[i][1]+';\n'+'}',file=file)
            # print write functions
            for element  in write_Data_Elements :
                print("void " + "Rte_IWrite_" + Name + "_" +Runnable+ "_" +  writeElementsMappedToPPorts[element]+ "_" + element + "(" + dataElementsMappedToTypes[element] + " * data)", file=file)
                print ('{\n'+  element +'= *data'+';',file=file)
                print('} \n',file=file)
        
        print(  'struct TimingEventArgs'+ '\n' + '{\n'+'int period;\n'+ 'Runnable runnable;\n'+ 'char* runnable_name;\n'+'};\n',file=file)

        print('typedef void (*Runnable)(); \n',file=file)
        print('pthread_mutex_t event_mutex = PTHREAD_MUTEX_INITIALIZER; \n ',file=file)
        print('int main() \n {\n ',file=file)
        print('pthread_mutex_init(&event_mutex, NULL);',file=file)


        for component in compenentslist:
            print('\n',file=file)
            Runnable_name=component.Get_Runnable_Name()
            Timing_event=component.Get_Timing_Event_Name_And_Period()
            Timing_event_name=next(iter(Timing_event))
            period=Timing_event[Timing_event_name]
            print(' struct TimingEventArgs '+'_'+Timing_event_name+';',file=file)
            print('_'+Timing_event_name+'.runnable ='+Runnable_name+';',file=file)
            print('_SeatSensorLeftUpdateTimer.period ='+ str(float(period)*1000) +';' ,file=file)
            print('_'+Timing_event_name+'.runnable_name ='+'"'+Runnable_name+'"'+';',file=file)
            print('pthread_t '+Timing_event_name+'_thread;',file=file)
            print('pthread_create(&'+Timing_event_name+ '_thread, NULL, TimerThread, (void*)&_'+Timing_event_name+');',file=file)
        
        print('\n pthread_t timeout_thread;\n pthread_create(&timeout_thread, NULL, Timeout, (void*)0); \n pthread_join(timeout_thread, NULL); \n  pthread_mutex_destroy(&event_mutex);',file=file)
        print('}',file=file)




        

              

        



        
       

            

        



        